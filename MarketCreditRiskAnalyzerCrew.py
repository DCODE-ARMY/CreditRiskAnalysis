from crewai import Agent, Crew, Process, Task
from crewai.project import CrewBase, agent, crew, task
from crewai_tools import SerperDevTool, PDFSearchTool, DirectoryReadTool, VisionTool
from composio_crewai import ComposioToolSet, Action, App
from crewai.tools import BaseTool
from crewai import LLM
import yaml
from dotenv import load_dotenv
load_dotenv()


from pydantic import BaseModel, Field
from typing import List, Optional, Union
from datetime import date, datetime
from FinanceTool import FinanceTool
from CompaniesHouseTool import CompaniesHouseTool
from PDFQATool import PDFQATool
import os
import requests

# import agentops
# agentops.init( api_key=os.getenv('AGENTOPS_API_KEY'),
#     default_tags=['crewai'])

os.environ['SERPER_API_KEY']=os.getenv('SERPER_API_KEY')
os.environ['OPENAI_API_KEY']=os.getenv('OPENAI_API_KEY')
composio_toolset = ComposioToolSet(api_key=os.getenv('COMPOSIO_API_KEY'))



# import mlflow

# mlflow.crewai.autolog()

# # Optional: Set a tracking URI and an experiment name if you have a tracking server
# mlflow.set_tracking_uri("http://localhost:5000")
# mlflow.set_experiment("CrewAI")






class DateTimeTool(BaseTool):
    name: str = "DateTimeTool"
    description: str = "A tool that returns the current date and time"

    def _run(self, *args, **kwargs):
        current = datetime.now()
        return {
            "date": current.strftime("%Y-%m-%d"),
            "time": current.strftime("%H:%M:%S"),
            "timezone": "UTC",
            "datetime": current.strftime("%Y-%m-%dT%H:%M:%S"),
            "timestamp": int(current.timestamp())
        }



# ----------------------------
# Task 1: Market Data and Quantitative Analysis Output Model
# ----------------------------
class FinancialMetric(BaseModel):
    name: str = Field(..., description="Name of the financial metric (e.g., CDS Spreads, Bond Yields)")
    latest_value: Optional[Union[float, str]] = Field(None, description="Latest value of the metric, if available")
    historical_trend: Optional[str] = Field(None, description="Brief description of the historical trend for the metric")


class MarketDataOutput(BaseModel):
    overview: str = Field(..., description="Brief summary of the objective and data sources used")
    metrics: List[FinancialMetric] = Field(..., description="List of key financial metrics with details")
    historical_vs_current: str = Field(..., description="Analysis comparing historical data with current status")
    company_filings_analysis_narrative: str = Field(..., description="The complete, structured text output from the analysis of company filings (e.g., using PDFQATool with documents from CompaniesHouseTool). "
            "This should include sections like 'Key Financial Figures', 'Significant Changes in Financial Performance', "
            "'Risk Factors', 'Management's Outlook', and a 'Summary', if generated by the analysis tools. "
            "The entire report should be captured as a single string in this field.")
    sources: List[str] = Field(..., description="List of data sources and references used for the analysis")


# ----------------------------
# Task 2: Global, Local, and Internal Events Analysis Output Model
# ----------------------------
class EventDetail(BaseModel):
    date: str = Field(..., description="Date of the event (YYYY-MM-DD)")
    event_title: str = Field(..., description="Title or concise description of the event")
    event_type: str = Field(..., description="Type of event (Global, Local, or Internal)")
    impact_analysis: str = Field(..., description="Analysis of the event's potential or observed impact on credit risk")
    source: str = Field(..., description="Credible source or reference for the event")
    link: str = Field(..., description="links used to gather the event informations")
    


class GlobalEventsOutput(BaseModel):
    overview: str = Field(..., description="Introduction to the purpose and scope of the event analysis")
    events: List[EventDetail] = Field(..., description="List of key events with detailed information")
    comprehensive_analysis: str = Field(..., description="Synthesis of how the events collectively influence credit risk")
    summary_of_findings: str = Field(..., description="Bullet-point summary of the most critical events and their impacts")


# ----------------------------
# Task 3: People Reviews and Qualitative Data Output Model
# ----------------------------
class SentimentDetail(BaseModel):
    theme: str = Field(..., description="Identified theme in the reviews (e.g., positive work environment)")
    evidence: List[str] = Field(
        ..., description="List of anonymized or paraphrased quotes that support the theme"
    )

class PeopleReviewsOutput(BaseModel):
    overview: str = Field(..., description="Summary of the review aggregation scope and overall sentiment")
    positive_sentiment: SentimentDetail = Field(
        ..., description="Key positive themes and supporting evidence from the reviews"
    )
    negative_sentiment: SentimentDetail = Field(
        ..., description="Key negative themes and supporting evidence from the reviews"
    )
    detailed_analysis: str = Field(
        ..., description="In-depth narrative discussing the balance of positive and negative sentiment and their implications"
    )
    overall_assessment: str = Field(
        ..., description="Final summary of public perception and its potential impact on credit risk"
    )



# ----------------------------
# Task 4: Data Sentiment Analysis
# ----------------------------
class ComprehensiveSentimentAnalysisOutput(BaseModel):
    market_data: MarketDataOutput = Field(
        ..., description="Enhanced market data analysis including financial metrics with sentiment scores"
    )
    global_events: GlobalEventsOutput = Field(
        ..., description="Enhanced event analysis including sentiment scores for each event"
    )
    people_reviews: PeopleReviewsOutput = Field(
        ..., description="Enhanced qualitative analysis of people reviews with sentiment scores for identified themes"
    )
    overall_sentiment_score: float = Field(
        ..., description="Overall numerical sentiment score aggregated from all data points"
    )
    detailed_summary: str = Field(
        ..., description="A very detailed narrative summary explaining how the overall sentiment was derived and what it indicates about the company"
    )



# ----------------------------
# Task 5: Credit Risk Analysis
# ----------------------------
class CreditRiskTableEntry(BaseModel):
    component: str = Field(
        ...,
        description="Name of the data component (e.g., 'Market Data', 'Global Events', 'People Reviews',)"
    )
    value: Optional[float] = Field(
        None,
        description="The numerical metric or score provided by this component (if applicable)"
    )
    # sentiment_score: Optional[float] = Field(
    #     None,
    #     description="The sentiment score associated with this component's data"
    # )
    risk_contribution: Optional[str] = Field(
        None,
        description="The contribution of this component to the overall credit risk score(Low,Medium,High)"
    )

class CreditRiskAssessmentReport(BaseModel):
    final_credit_risk_score: float = Field(
        ...,
        description="The final aggregated credit risk score for the company"
    )
    explanation_of_score_calculation: str = Field(
        ...,
        description="A detailed narrative explaining how the final credit risk score is calculated"
    )
    detailed_explanation: str = Field(
        ...,
        description="A detailed narrative explaining how market data, events, public sentiment, and qualitative reviews contributed to the final credit risk score"
    )
    details_table: List[CreditRiskTableEntry] = Field(
        ...,
        description="A table summarizing all the key components, each with its associated numerical value, and individual risk contribution (e.g. Low,Medium,High)"
    )
    overall_summary: Optional[str] = Field(
        None,
        description="A very detailed overall summary of the credit risk evaluation, highlighting key insights and risk factors"
    )




# ----------------------------
# Task 6: Strategic Decision  Maker
# ----------------------------
class DecisionAction(BaseModel):
    type: str = Field(..., description="The type of decision or action (e.g., 'recommendation', 'follow_up', 'email')")
    content: str = Field(..., description="The specific content or outcome of the decision (e.g., 'Invest $10M by April 2025')")
    rationale: str = Field(..., description="Detailed explanation of why this decision was made, referencing specific data or inputs")
    value: Optional[float] = Field(None, description="Quantitative value associated with the decision, if applicable (e.g., investment amount in USD, risk score adjustment)")
    deadline: Optional[date] = Field(None, description="Date by which the action should be executed or reviewed, if applicable")
    dependencies: Optional[List[str]] = Field(None, description="List of prerequisites or delegated tasks this decision relies on (e.g., 'Await Support Agent report')")

class StrategicDecisionOutput(BaseModel):
    overview: str = Field(..., description="Comprehensive summary of the decision-making approach, key inputs (e.g., credit risk score, events), and overarching strategy")
    decisions: List[DecisionAction] = Field(..., description="List of strategic decisions and actions, each with detailed rationale and supporting metrics")
    tool_log: List[str] = Field(..., description="Detailed log of tools used or tasks delegated, including outcomes or statuses (e.g., 'Email sent successfully via GmailTool')")
    assumptions: Optional[List[str]] = Field(None, description="List of assumptions made due to missing data or uncertainties (e.g., 'Assumed neutral impact from missing CDS spreads')")
    next_steps: Optional[str] = Field(None, description="Summary of immediate next actions or recommendations for the user to implement the strategy")


with open("./agents.yaml", "r",encoding="windows-1252") as f:
    agents_config = yaml.safe_load(f)
with open("./tasks.yaml", "r",encoding="windows-1252") as f:
    tasks_config = yaml.safe_load(f)


# llm = LLM( model="anthropic/claude-3-5-sonnet-latest",
#           api_key='',
#           base_url="https://api.anthropic.com",
#           temperature=0.1 )

llm=LLM(model="openai/gpt-4o-mini",temperature=0.1)
# llm=LLM(model="ollama/michaelneale/deepseek-r1-goose:70b", base_url="http://localhost:11434")

class MarketCreditRiskAnalyzerCrew:
    """Market Credit Risk Analyzer Crew"""
    def __init__(self):
        self.agents_config=agents_config
        self.tasks_config=tasks_config
        self.search_tool = SerperDevTool()
        self.finance_tool=FinanceTool()
        self.send_email=composio_toolset.get_tools(actions=['GMAIL_SEND_EMAIL'])
        self.calender=composio_toolset.get_tools(actions=['GOOGLECALENDAR_CREATE_EVENT'])
        self.gmeet=composio_toolset.get_tools(actions=['GOOGLEMEET_CREATE_MEET'])
        self.PDFSearchTool= PDFSearchTool()
        self.DirectorysearchTool=DirectoryReadTool()
        self.VisionTool=VisionTool()
        self.DateTimeTool=DateTimeTool()
        self.CompaniesHouseTool=CompaniesHouseTool()
        self.PDFQATool=PDFQATool()
    def credit_researcher_agent(self) -> Agent:
        return Agent(
            config=self.agents_config['credit_researcher_agent'],
            verbose=True,
            tools=[self.search_tool,self.DateTimeTool],
            allow_delegation=False,
            memory=False,
            llm=llm,
        )


    def sentiment_agent(self) -> Agent:
        return Agent(
            config=self.agents_config['sentiment_agent'],
            verbose=True,
            allow_delegation=False,
            memory=False,
            llm=llm,
            tools=[self.search_tool]
        )


    def credit_risk_agent(self) -> Agent:
        return Agent(
                config=self.agents_config['credit_risk_agent'],
                verbose=True,
                allow_delegation=True,
                memory=False,
                llm=llm,
                tools=[self.search_tool],)


    def decision_support_agent(self) -> Agent:
        return Agent(
            config=self.agents_config['decision_support_agent'],
            verbose=True,
            allow_delegation=False,
            memory=False,
            llm=llm,
            tools=[self.search_tool],
        )  


    def decision_maker_agent(self) -> Agent:
        return Agent(
          config=self.agents_config['strategic_decision_agent'],
          verbose=True,
          allow_delegation=True,
          memory=True,
          llm=llm,
          tools= [self.search_tool,self.DateTimeTool] + self.send_email + self.calender + self.gmeet,
        )  



    def market_data_task(self) -> Task:
        return Task(
            config=self.tasks_config['market_data_task'],
            agent=self.credit_researcher_agent(),
            tools=[self.finance_tool,self.search_tool,self.CompaniesHouseTool,self.PDFQATool,self.DirectorysearchTool],
            output_pydantic=MarketDataOutput,
        )


    def global_events_task(self) -> Task:
        return Task(
            config=self.tasks_config['global_events_task'],
            agent=self.credit_researcher_agent(),
            tools=[self.search_tool],
            output_pydantic=GlobalEventsOutput,
        )


    def people_reviews_task(self) -> Task:
        return Task(
            config=self.tasks_config['people_reviews_task'],
            agent=self.credit_researcher_agent(),
            tools=[self.search_tool],
            output_pydantic=PeopleReviewsOutput,
        )


    def sentiment_task(self) -> Task:
        return Task(
            config=self.tasks_config['sentiment_task'],
            agent=self.sentiment_agent(),
            context=[self.market_data_task(), self.global_events_task(), self.people_reviews_task()],
            output_pydantic=ComprehensiveSentimentAnalysisOutput,
            # tools=[search_tool],
        )


    def credit_risk_task(self) -> Task:
        return Task(
            config=self.tasks_config['credit_risk_task'],
            agent=self.credit_risk_agent(),
            context=[self.market_data_task(), self.global_events_task(), self.people_reviews_task()],
            output_pydantic=CreditRiskAssessmentReport,
            tools=[self.search_tool],
            # guardrail=validate_credit_risk_output,  
            max_retries=3
        )


    def strategic_decision_task(self) -> Task:
        return Task(
            config=self.tasks_config['strategic_decision_task'],
            agent=self.decision_maker_agent(),
            context=[self.market_data_task(), self.global_events_task(), self.people_reviews_task(),self.credit_risk_task()],
            output_pydantic=StrategicDecisionOutput,
            tools= [self.search_tool,self.DateTimeTool] + self.send_email + self.calender + self.gmeet,
            # guardrail=validate_credit_risk_output,  
            max_retries=10

        )

    def crew(self) -> Crew:
        return Crew(
            agents=[
            self.credit_researcher_agent(),
            self.credit_risk_agent(),
            self.decision_support_agent(),
            self.decision_maker_agent(),
            ],

            tasks=[
            self.market_data_task(),
            self.global_events_task(),
            self.people_reviews_task(),
            # self.sentiment_task(),
            self.credit_risk_task(),
            self.strategic_decision_task()
            ],
            process=Process.hierarchical,
            memory=True,
            verbose=True,
            manager_llm=llm,
            planning=False,
        )




# if __name__ == "__main__":

#     crew = MarketCreditRiskAnalyzerCrew().crew()
#     result=crew.kickoff({"company":"Intel - 01134945"})